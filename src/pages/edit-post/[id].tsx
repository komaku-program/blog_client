import { Post } from "@/types";
import axios from "axios";
import { useRouter } from "next/router";
import React, { ChangeEvent, FormEvent, use, useState } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import ImageUploadForm from "@/components/ImageUploadForm/index";
import Head from "next/head";
import Header from "@/components/Header/index";
import styles from "@/styles/Home.module.css";
import Image from "next/image";

type Props = {
  post: Post;
};

type FormInputs = {
  title: string;
  content: string;
};

export async function getServerSideProps(context: any) {
  const id = context.params.id;

  try {
    const res = await axios.get(
      `${process.env.NEXT_PUBLIC_API_URL}/api/v1/posts/${id}`
    );
    const post = res.data;

    return {
      props: {
        post,
      },
    };
  } catch (error) {
    return {
      notFound: true,
    };
  }
}
const EditPost = ({ post }: Props) => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormInputs>({
    mode: "onChange",
    defaultValues: {
      title: post.title,
      content: post.content,
    },
  });

  const [thumbnailUrl, setThumbnailUrl] = useState(post.thumbnail);
  const router = useRouter();

  const onSubmit: SubmitHandler<FormInputs> = async (data) => {
    try {
      await axios.put(
        `${process.env.NEXT_PUBLIC_API_URL}/api/v1/posts/${post.id}`,
        {
          title: data.title,
          content: data.content,
          thumbnailUrl: thumbnailUrl,
        }
      );
      router.push("/");
    } catch (err) {
      alert("投稿に失敗しました");
    }
  };

  return (
    <div>
      <Head>
        <title>たかブログ</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Header />
      <div className={styles.create_section}>
        <h1>ブログ投稿編集</h1>
        <form onSubmit={handleSubmit(onSubmit)}>
          <div className={styles.title}>
            <label>タイトル</label>
            <input
              type="text"
              {...register("title", {
                required: "タイトルは必須です",
                maxLength: {
                  value: 30,
                  message: "タイトルは30文字以内で入力してください",
                },
              })}
            />
            {errors.title && <p>{errors.title.message}</p>}
          </div>
          <br />
          <div className={styles.form}>
            <label>本文</label>
            <textarea
              rows={20}
              cols={100}
              {...register("content", {
                required: "本文は必須です",
                maxLength: {
                  value: 5000,
                  message: "本文は5000文字以内で入力してください",
                },
              })}
            />
            {errors.content && <p>{errors.content.message}</p>}
          </div>
          <ImageUploadForm setThumbnailUrl={setThumbnailUrl} />

          <div>
            {thumbnailUrl && (
              <Image
                className={styles.image}
                src={`${process.env.NEXT_PUBLIC_API_URL}${post.thumbnail}`}
                alt="サムネイル画像"
                width={400}
                height={120}
              />
            )}
          </div>
          <button className="button" type="submit">
            編集
          </button>
        </form>
      </div>
    </div>
  );
};

export default EditPost;
